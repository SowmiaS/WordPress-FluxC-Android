package org.wordpress.android.fluxc.persistence.dao

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy.REPLACE
import androidx.room.Query
import androidx.room.Transaction
import kotlinx.coroutines.flow.Flow
import org.wordpress.android.fluxc.model.LocalOrRemoteId.LocalId
import org.wordpress.android.fluxc.model.LocalOrRemoteId.RemoteId
import org.wordpress.android.fluxc.model.WCOrderModel
import org.wordpress.android.fluxc.model.order.OrderIdSet

typealias AutoGeneratedId = Long

@Dao
abstract class OrdersDao {
    @Query("SELECT * FROM OrderEntity")
    abstract fun getAllOrders(): List<WCOrderModel>

    @Insert(onConflict = REPLACE)
    abstract fun insertOrUpdateOrder(order: WCOrderModel): AutoGeneratedId

    @Query("SELECT * FROM OrderEntity WHERE remoteOrderId = :remoteOrderId AND localSiteId = :localSiteId")
    abstract fun getOrder(remoteOrderId: RemoteId, localSiteId: LocalId): WCOrderModel?

    @Query("SELECT * FROM OrderEntity WHERE remoteOrderId = :remoteOrderId AND localSiteId = :localSiteId")
    abstract fun observeOrder(remoteOrderId: RemoteId, localSiteId: LocalId): Flow<WCOrderModel?>

    @Transaction
    open fun updateLocalOrder(
        remoteOrderId: RemoteId,
        localSiteId: LocalId,
        updateOrder: WCOrderModel.() -> WCOrderModel
    ) {
        getOrder(remoteOrderId, localSiteId)
                ?.let(updateOrder)
                ?.let { insertOrUpdateOrder(it) }
    }

    @Deprecated(
            message = "Do not use OrderIdSet. Prefer Flows over sequential call.",
            replaceWith = ReplaceWith(expression = "observeOrder()")
    )
    open fun getOrderForIdSet(orderIdSet: OrderIdSet): WCOrderModel? {
        return getOrder(
                localSiteId = LocalId(orderIdSet.localSiteId),
                remoteOrderId = RemoteId(orderIdSet.remoteOrderId)
        )
    }

    @Query("SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId AND status IN (:status)")
    abstract fun getOrdersForSite(localSiteId: LocalId, status: List<String>): List<WCOrderModel>

    @Query("SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId")
    abstract fun getOrdersForSite(localSiteId: LocalId): List<WCOrderModel>

    @Query("SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId AND status IN (:status)")
    abstract fun observeOrdersForSite(localSiteId: LocalId, status: List<String>): Flow<List<WCOrderModel>>

    @Query("SELECT * FROM OrderEntity WHERE localSiteId = :localSiteId AND remoteOrderId IN (:remoteOrderIds)")
    abstract fun getOrdersForSiteByRemoteIds(localSiteId: LocalId, remoteOrderIds: List<RemoteId>): List<WCOrderModel>

    @Query("DELETE FROM OrderEntity WHERE localSiteId = :localSiteId")
    abstract fun deleteOrdersForSite(localSiteId: LocalId)

    @Query("SELECT COUNT(*) FROM OrderEntity WHERE localSiteId = :localSiteId")
    abstract fun getOrderCountForSite(localSiteId: LocalId): Int
}
