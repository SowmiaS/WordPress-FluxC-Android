package org.wordpress.android.fluxc.usecase

import android.app.Application
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.runBlocking
import org.assertj.core.api.Assertions.assertThat
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner
import org.wordpress.android.fluxc.model.addons.WCProductAddonModel
import org.wordpress.android.fluxc.model.addons.WCProductAddonModel.AddOnDisplay.Dropdown
import org.wordpress.android.fluxc.model.addons.WCProductAddonModel.AddOnPriceType.FlatFee
import org.wordpress.android.fluxc.model.addons.WCProductAddonModel.AddOnRestrictionsType.Email
import org.wordpress.android.fluxc.model.addons.WCProductAddonModel.AddOnTitleFormat.Heading
import org.wordpress.android.fluxc.model.addons.WCProductAddonModel.AddOnType.Checkbox
import org.wordpress.android.fluxc.network.rest.wpcom.wc.addons.dto.AddOnGroupDto
import org.wordpress.android.fluxc.persistence.WCAndroidDatabase
import org.wordpress.android.fluxc.persistence.dao.AddonsDao
import org.wordpress.android.fluxc.persistence.entity.AddonWithOptions
import org.wordpress.android.fluxc.persistence.entity.GlobalAddonGroupWithAddons
import org.wordpress.android.fluxc.persistence.mappers.toAddonEntity
import org.wordpress.android.fluxc.persistence.mappers.toAddonGroupEntity
import org.wordpress.android.fluxc.persistence.mappers.toAddonOptionEntity

@RunWith(RobolectricTestRunner::class)
internal class CacheGlobalAddonsGroupsTest {
    private lateinit var database: WCAndroidDatabase
    private lateinit var addonsDao: AddonsDao
    private lateinit var sut: CacheGlobalAddonsGroups

    @Before
    fun setUp() {
        val context = ApplicationProvider.getApplicationContext<Application>()
        database = Room.inMemoryDatabaseBuilder(context, WCAndroidDatabase::class.java)
                .allowMainThreadQueries()
                .build()
        addonsDao = database.addonsDao()

        sut = CacheGlobalAddonsGroups(addonsDao)
    }

    @Test
    fun `save and retrieve global add-on`(): Unit = runBlocking {
        val expectedGlobalAddonGroupEntity = TEST_GLOBAL_ADDON_GROUP_DTO.mapDtoToEntity(
                autoGeneratedId = AUTO_GENERATED_ID_IN_FIRST_ITERATION
        )

        sut.invoke(
                globalAddonGroups = listOf(TEST_GLOBAL_ADDON_GROUP_DTO),
                remoteSiteId = TEST_REMOTE_SITE_ID
        )

        val resultFromDatabase = addonsDao.getGlobalAddonsForSite(TEST_REMOTE_SITE_ID).first()
        assertThat(resultFromDatabase).containsOnly(expectedGlobalAddonGroupEntity)
    }

    @Test
    fun `caching global addon groups doesn't duplicate entities`(): Unit = runBlocking {
        val expectedGlobalAddonGroupEntity = TEST_GLOBAL_ADDON_GROUP_DTO.mapDtoToEntity(
                autoGeneratedId = AUTO_GENERATED_ID_IN_SECOND_ITERATION
        )

        sut.invoke(
                globalAddonGroups = listOf(TEST_GLOBAL_ADDON_GROUP_DTO),
                remoteSiteId = TEST_REMOTE_SITE_ID
        )
        sut.invoke(
                globalAddonGroups = listOf(TEST_GLOBAL_ADDON_GROUP_DTO),
                remoteSiteId = TEST_REMOTE_SITE_ID
        )

        val resultFromDatabase = addonsDao.getGlobalAddonsForSite(TEST_REMOTE_SITE_ID).first()
        assertThat(resultFromDatabase).containsOnly(expectedGlobalAddonGroupEntity)
    }

    @After
    fun tearDown() {
        database.close()
    }

    private fun AddOnGroupDto.mapDtoToEntity(autoGeneratedId: Long): GlobalAddonGroupWithAddons {
        return GlobalAddonGroupWithAddons(
                group = this.toAddonGroupEntity(TEST_REMOTE_SITE_ID)
                        .copy(globalGroupLocalId = autoGeneratedId),
                addons = addons.map { addon ->
                    AddonWithOptions(
                            addon = addon.toAddonEntity(globalGroupLocalId = autoGeneratedId)
                                    .copy(addonLocalId = autoGeneratedId),
                            options = addon.options?.map { addonOption ->
                                addonOption.toAddonOptionEntity(addonLocalId = autoGeneratedId)
                                        .copy(addonOptionLocalId = autoGeneratedId)
                            }.orEmpty()
                    )
                }
        )
    }

    private companion object {
        const val AUTO_GENERATED_ID_IN_FIRST_ITERATION = 1L
        const val AUTO_GENERATED_ID_IN_SECOND_ITERATION = 2L
        const val TEST_REMOTE_SITE_ID = 5L

        val TEST_GLOBAL_ADDON_GROUP_DTO = AddOnGroupDto(
                id = 5,
                name = "Test Group",
                categoryIds = null,
                addons = listOf(
                        WCProductAddonModel(
                                titleFormat = Heading,
                                description = "Test",
                                descriptionEnabled = "1",
                                restrictionsType = Email,
                                adjustPrice = "0",
                                priceType = FlatFee,
                                type = Checkbox,
                                display = Dropdown,
                                name = "Test Addon name",
                                required = "0",
                                position = "4",
                                restrictions = "0",
                                price = "123",
                                min = "10",
                                max = "100",
                                options = listOf(
                                        WCProductAddonModel.ProductAddonOption(
                                                priceType = FlatFee,
                                                label = "Test label",
                                                price = "Test price",
                                                image = null
                                        )
                                )
                        )
                )
        )
    }
}
